/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package widows;

import java.sql.*;
import class_systems.Conexion;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.WindowConstants;

/**
 *
 * @author andre
 */
public class StatusGraphics extends javax.swing.JFrame {

    String user;
    int newAdmission;
    int notFixed;
    int inReview;
    int fixed;
    int delivered;

    String[] vector_status_name = new String[5];
    int[] vector_status_total = new int[5];

    /**
     * Creates new form StatusGrapichs
     */
    public StatusGraphics() {
        initComponents();

        user = Login.user;
        setSize(550, 450);
        setResizable(false);
        setTitle("Technical - Session as " + user);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);

        ImageIcon wallpaper = new ImageIcon("src/images/wallpaperPrincipal.jpg");
        Icon icon = new ImageIcon(wallpaper.getImage().getScaledInstance(
                jLabel_Wallpaper.getWidth(),
                jLabel_Wallpaper.getHeight(),
                Image.SCALE_DEFAULT)
        );
        jLabel_Wallpaper.setIcon(icon);
        this.repaint();

        try {
            Connection cn = Conexion.connect();
            PreparedStatement pst = cn.prepareStatement(
                    "SELECT status, COUNT(status) AS amount FROM equipments GROUP BY status"
            );
            ResultSet rs = pst.executeQuery();

            if (rs.next()) {
                int position = 0;

                do {
                    vector_status_name[position] = rs.getString(1);
                    vector_status_total[position] = rs.getInt(2);

                    if (vector_status_name[position].equalsIgnoreCase("In Review")) {
                        inReview = vector_status_total[position];
                    } else if (vector_status_name[position].equalsIgnoreCase("Delivered")) {
                        delivered = vector_status_total[position];
                    } else if (vector_status_name[position].equalsIgnoreCase("Not Fixed")) {
                        notFixed = vector_status_total[position];
                    } else if (vector_status_name[position].equalsIgnoreCase("New Admission")) {
                        newAdmission = vector_status_total[position];
                    } else if (vector_status_name[position].equalsIgnoreCase("Fixed")) {
                        fixed = vector_status_total[position];
                    }

                    position++;
                } while (rs.next());
            }
        } catch (SQLException e) {
            System.err.println("Error connecting to database " + e);
            JOptionPane.showMessageDialog(null, "Error contact wtih admin.");
        }

        repaint();
    }

    @Override
    public Image getIconImage() {
        Image retValue = Toolkit.getDefaultToolkit().getImage(ClassLoader.getSystemResource("images/icon.png"));
        return retValue;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel_Wallpaper = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImage(getIconImage());
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Status Graphic");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));
        getContentPane().add(jLabel_Wallpaper, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 550, 450));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StatusGraphics.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StatusGraphics.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StatusGraphics.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StatusGraphics.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StatusGraphics().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel_Wallpaper;
    // End of variables declaration//GEN-END:variables

    public int statusRepeated(int newAdmission, int notFixed, int inReview, int fixed, int delivered) {
        if (newAdmission > notFixed && newAdmission > inReview && newAdmission > fixed && newAdmission > delivered) {
            return newAdmission;
        } else if (notFixed > inReview && notFixed > notFixed && notFixed > delivered) {
            return notFixed;
        } else if (inReview > fixed && inReview > delivered) {
            return inReview;
        } else if (fixed > delivered) {
            return fixed;
        } else {
            return delivered;
        }
    }

    @Override
    public void paint(Graphics g) {
        super.paint(g);
        int statusRepeated = statusRepeated(newAdmission, notFixed, inReview, fixed, delivered);

        int large_newAdmission = newAdmission * 400 / statusRepeated;
        int large_notFixed = notFixed * 400 / statusRepeated;
        int large_inReview = inReview * 400 / statusRepeated;
        int large_fixed = fixed * 400 / statusRepeated;
        int large_delivered = delivered * 400 / statusRepeated;

        g.setColor(new Color(240, 248, 0));//yellow
        g.fillRect(100, 100, large_newAdmission, 40);
        g.drawString("New Admission", 10, 118);
        g.drawString("Total: " + newAdmission, 10, 133);

        g.setColor(new Color(255, 0, 0));//red
        g.fillRect(100, 150, large_notFixed, 40);
        g.drawString("Not Fixed", 10, 168);
        g.drawString("Total: " + notFixed, 10, 183);

        g.setColor(new Color(0, 0, 0));//black
        g.fillRect(100, 200, large_inReview, 40);
        g.drawString("In Review", 10, 218);
        g.drawString("Total: " + inReview, 10, 233);

        g.setColor(new Color(255, 255, 255));//white
        g.fillRect(100, 250, large_fixed, 40);
        g.drawString("Fixed", 10, 268);
        g.drawString("Total: " + fixed, 10, 283);

        g.setColor(new Color(0, 85, 0));//green
        g.fillRect(100, 300, large_delivered, 40);
        g.drawString("Delivered", 10, 318);
        g.drawString("Total: " + newAdmission, 10, 333);
    }
}
